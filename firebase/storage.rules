rules_version = '2';
service firebase.storage {
    match /b/{bucket}/o {
        function isAuth() {
            return request.auth != null 
                && request.time < timestamp.value(request.auth.token.expiresAt);
        }

        match /rabbits/{rabbitId} {
            function isAccessForRabbit() {
                return request.auth.token.rabbit.id == rabbitId;
            }
            match /photos {
                function fullEditAccess() {
                    return isAccessForRabbit() 
                        && request.auth.token.rabbit.photos == true;
                }
                function ownEditAccess() {
                    return isAccessForRabbit() 
                        && request.auth.token.rabbit.photos == 'own' 
                        && resource.metadata.uploadedBy == request.auth.uid;
                }
                function photosAccess() {
                    return isAccessForRabbit() 
                        && (request.auth.token.rabbit.photos == true 
                        || request.auth.token.rabbit.photos == 'own');
                }


                match /{fileName=**} {
                    allow read: if isAuth() && photosAccess();
                    allow create: if isAuth() && photosAccess() 
                        && request.resource.metadata.uploadedBy == request.auth.uid;
                    allow update: if isAuth() && fullEditAccess() || ownEditAccess();
                    allow delete: if isAuth() && fullEditAccess() || ownEditAccess();
                }
            }
        }
    }
}